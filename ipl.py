# -*- coding: utf-8 -*-
"""ipl

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PytFC8XowRkGvDKHul91yNbhsla0Hsgq
"""

import numpy as np
import pandas as pd
import pickle

df = pd.read_csv("IPL_Matches_2008_2022.csv")
df_new=df.drop(['Venue','Team2Players','Team1Players','Player_of_Match','method','Margin','WonBy','SuperOver','MatchNumber','Season','Date','ID','Umpire1','Umpire2'], axis=1)


df_new['WinningTeam']=df['WinningTeam'].fillna(method='ffill')

df_new['City']=df['City'].fillna(method='ffill')

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

df_new['City']=le.fit_transform(df['City'])

df_new['Team1']=le.fit_transform(df['Team1'])

df_new['Team2']=le.fit_transform(df['Team2'])

df_new['TossDecision']=le.fit_transform(df['TossDecision'])

df_new['WinningTeam']=le.fit_transform(df['WinningTeam'])

df_new['TossWinner']=le.fit_transform(df['TossWinner'])

# # Save the label encoder
# pickle.dump(le, open('label_encoder.pkl', 'wb'))


X=df_new.drop(['WinningTeam'], axis=1)
Y=df_new['WinningTeam']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1, stratify=Y)

from sklearn.preprocessing import OneHotEncoder as OHE
from sklearn.compose import ColumnTransformer

ohe = OHE(sparse=False, drop='first')

encoded_cities = df_new['City']
encoded_cities=encoded_cities

encoded_team1 = df_new['Team1']
encoded_tosses = df_new['TossDecision']


# Create a mapping between the city names and their one-hot encoded values
city_mapping = {}
for city, encoded_city in zip(df['City'].unique(), encoded_cities):
    city_mapping[city] = encoded_city

# Save the city mapping as a pickle file
pickle.dump(city_mapping, open('city_mapping.pkl', 'wb'))

team1_mapping = {}
for team1, encoded_team1 in zip(df['Team1'].unique(), encoded_team1):
    team1_mapping[team1] = encoded_team1
    
toss_mapping = {}
for toss, encoded_toss in zip(df['TossDecision'].unique(), encoded_tosses):
    toss_mapping[toss] = encoded_toss

# Save the city mapping as a pickle file
pickle.dump(team1_mapping, open('team1_mapping.pkl', 'wb'))
pickle.dump(team1_mapping, open('team2_mapping.pkl', 'wb'))
pickle.dump(toss_mapping, open('toss_mapping.pkl', 'wb'))


trf = ColumnTransformer([('trf', OHE(sparse=False,drop='first'), ['City','Team1','Team2','TossWinner','TossDecision'])],  remainder='passthrough')


from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

pipe = Pipeline(steps=[
    ('step1', trf),
    ('step2', LogisticRegression(solver='liblinear'))
])

pipe.fit(x_train, y_train)

y_pred = pipe.predict(x_test)
print(y_pred)
print(y_test)
print(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred,y_test))
# Saving model to disk
pickle.dump(pipe, open('model.pkl','wb'))

# model = pickle.load(open('model.pkl','rb'))
# input_df = pd.DataFrame({'City':2,'Team1':9,'Team2':6,'TossWinner':9,'TossDecision':1})
# prediction = model.predict(input_df)
# print(prediction)